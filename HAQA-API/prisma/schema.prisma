// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["haqa_schema"] 
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(100)
  email      String    @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName  String?   @map("first_name") @db.VarChar(100)
  lastName   String?   @map("last_name") @db.VarChar(100)
  isActive   Boolean   @default(true) @map("is_active")
  lastLogin  DateTime? @map("last_login") @db.Timestamptz
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  userRoles     UserRole[]
  userFunctions UserFunction[]

  @@map("users")
  @@schema("haqa_schema")
}

model Role {
  id           Int       @id @default(autoincrement())
  name         String    @unique @db.VarChar(50)
  description  String?   @db.Text
  isSystemRole Boolean   @default(false) @map("is_system_role")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  userRoles     UserRole[]
  roleFunctions RoleFunction[]

  @@map("roles")
  @@schema("haqa_schema")
}

model Function {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(100)
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text
  category    String?   @db.VarChar(100)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  roleFunctions RoleFunction[]
  userFunctions UserFunction[]

  @@map("functions")
  @@schema("haqa_schema") 
}

model RoleFunction {
  roleId     Int      @map("role_id")
  functionId Int      @map("function_id")

  // Relations
  role       Role     @relation(fields: [roleId], references: [id])
  function   Function @relation(fields: [functionId], references: [id])

  @@id([roleId, functionId])
  @@map("role_functions")
  @@schema("haqa_schema")
}

model UserRole {
  userId    Int       @map("user_id")
  roleId    Int       @map("role_id")
  grantedAt DateTime  @default(now()) @map("granted_at") @db.Timestamptz
  expiresAt DateTime? @map("expires_at") @db.Timestamptz

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
  @@schema("haqa_schema")
}

model UserFunction {
  userId     Int       @map("user_id")
  functionId Int       @map("function_id")
  grantedAt  DateTime  @default(now()) @map("granted_at") @db.Timestamptz
  expiresAt  DateTime? @map("expires_at") @db.Timestamptz

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  function   Function  @relation(fields: [functionId], references: [id])

  @@id([userId, functionId])
  @@map("user_functions")
  @@schema("haqa_schema")
}